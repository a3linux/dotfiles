        " .vimrc
    " For Vim8 and plugin manage with pack
" Keep this file simple and good comments
"
" version: 0.0.1(Fri 22 Mar 2019 01:02:30 PM UTC)

set nocp

" GUI font and colorscheme
if has('gui_running')
    " columns: 80(editting) + 25(Navigator) + 3(flag & symbols)
    set columns=108 lines=64
    colorscheme PaperColor
    if has("gui_macvim")
        set guifont=Inconsolata-g\ for\ Powerline:h14
    else
        set guifont=Inconsolata-g\ for\ Powerline\ Medium\ 11
        set guioptions-=m
        set guioptions-=T
        set guioptions-=r
        set guioptions-=L
    endif
endif

" Private Key maps
" leader key to <blank>
let mapleader=' '
" Tab new
map tt :tabnew
" split windows in new tab
map ts :tab split<CR>

" NERDTree File Explorer
map <leader>e :NERDTreeToggle<CR>
let NERDTreeIgnore = ['\.git/', '\.pyc$', '\.pyo$', '\.jpg', '\.jpeg', '\.png', '\.pdf', '\.docx', '\.xls', '\.o', '\.lo', '\.so']

" Plugin settings
" Colorscheme PaperColor-theme settings
if &term =~? 'mlterm\|xterm\|xterm-256\|screen-256\|xterm-256color'
    let &t_Co = 256
    colorscheme PaperColor
    set background=dark " Set this again to confirm it is working
else
    colorscheme  delek
endif
let g:PaperColor_Theme_Options = {
            \ 'language': {
            \   'python': {
            \       'highlight_builtins': 1
            \   }
            \},
            \ 'theme': {
            \   'default.dark': {
            \       'transparent_background': 1
            \       }
            \   }
            \}
" end of PaperColor-theme
" Statusbar vim-airline
let g:airline_powerline_fonts = 1
let g:airline_theme = 'papercolor'
let g:airline#extensions#whitespace#enabled = 0
let g:airline#extensions#tmuxline#enabled = 1
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1
" show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'
let g:airline#extensions#tabline#left_sep = ' '
let g:airline#extensions#tabline#left_alt_sep = '|'
let g:airline#extensions#hunks#non_zero_only = 1
" end vim-airline

" FZF fuzzy finding
if has('unix')
    if system('uname') =~ 'Darwin'
        set rtp+=/usr/local/opt/fzf
    else
        set rtp+=~/.fzf
    endif
endif
nnoremap <C-p> :FZF -m<CR>
" Search buffers with;
nnoremap <Leader>b :Buffers<CR>

" ALE
" airline enable
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_warning_str = 'W'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_lint_on_enter = 1
let g:ale_lint_on_save = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_changed = 'normal'
let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1
let g:ale_list_window_size = 5
" <leader>f to Format Fix by ALE
nnoremap <Leader>f :ALEFix<CR>

" Always show sign column
let g:ale_sign_column_always = 1
" ALE Linters
let g:ale_linters = {
\   'javascript': ['prettier', 'eslint'],
\   'python': ['autopep8'],
\}
" ALE Fixers
let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'javascript': ['prettier', 'eslint'],
\   'python': ['autopep8', 'yapf'],
\}

" Asyncomplete.vim
" Tab completion
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <C-y> pumvisible() ? asyncomplete#close_popup() : "\<C-y>"
inoremap <expr> <C-e> pumvisible() ? asyncomplete#cancel_popup() : "\<C-e>"
inoremap <expr> <CR>  pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <C-q> <Plug>(asyncomplete_force_refresh) asyncomplete#force_refresh()

" asyncomplete-file.vim
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
\ 'name': 'file',
\ 'whitelist': ['*'],
\ 'priority': 5,
\ 'completor': function('asyncomplete#sources#file#completor'),
\ }))

" asyncomplete-buffer.vim
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#buffer#get_source_options({
\ 'name': 'buffer',
\ 'whitelist': ['*'],
\ 'blacklist': ['go'],
\ 'completor': function('asyncomplete#sources#buffer#completor'),
\ }))
" asyncomplete-emoji.vim
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#emoji#get_source_options({
\ 'name': 'emoji',
\ 'whitelist': ['*'],
\ 'priority': 10,
\ 'completor': function('asyncomplete#sources#emoji#completor'),
\ }))
" asyncomplete-omni.vim
autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#omni#get_source_options({
\ 'name': 'omni',
\ 'whitelist': ['*'],
\ 'blacklist': ['c', 'cpp', 'html'],
\ 'priority': 0,
\ 'completor': function('asyncomplete#sources#omni#completor')
\  }))
" asyncomplete-ultisnips.vim
if has('python3')
    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsListSnippets="<F2>"
    let g:UltiSnipsEditSplit="vertical"
    autocmd User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
        \ 'name': 'ultisnips',
        \ 'whitelist': ['*'],
        \ 'priority': 2,
        \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
        \ }))
endif
" asyncomplete-tags.vim
au User asyncomplete_setup call asyncomplete#register_source(asyncomplete#sources#tags#get_source_options({
    \ 'name': 'tags',
    \ 'whitelist': ['*'],
    \ 'priority': 9,
    \ 'completor': function('asyncomplete#sources#tags#completor'),
    \ 'config': {
    \    'max_file_size': 50000000,
    \  },
    \ }))
" vim-lsp
" Python [ pyls ]
if executable('pyls')
    " pip install python-language-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pyls',
        \ 'cmd': {server_info->['pyls']},
        \ 'whitelist': ['python'],
        \ })
endif
" javascript
if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'javascript support using typescript-language-server',
    \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
    \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'package.json'))},
    \ 'whitelist': ['javascript', 'javascript.jsx'],
    \ })
else
  echohl ErrorMsg
  echom 'Sorry, `typescript-language-server` is not installed. See `:help vim-lsp-javascript` for more details on setup.'
  echohl NONE
endif
" typescript
if executable('typescript-language-server')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'typescript-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'typescript-language-server --stdio']},
        \ 'root_uri':{server_info->lsp#utils#path_to_uri(lsp#utils#find_nearest_parent_file_directory(lsp#utils#get_buffer_path(), 'tsconfig.json'))},
        \ 'whitelist': ['typescript', 'typescript.tsx'],
        \ })
endif
" Go [ go-langserver ]
if executable('go-langserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'go-langserver',
        \ 'cmd': {server_info->['go-langserver', '-gocodecompletion']},
        \ 'whitelist': ['go'],
        \ })
endif
" dockerfile
if executable('docker-langserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'docker-langserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'docker-langserver --stdio']},
        \ 'whitelist': ['dockerfile'],
        \ })
endif
" ruby
if executable('solargraph')
    " gem install solargraph
    au User lsp_setup call lsp#register_server({
        \ 'name': 'solargraph',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
        \ 'initialization_options': {"diagnostics": "true"},
        \ 'whitelist': ['ruby'],
        \ })
endif
" PHP [ intelephense ]
au User lsp_setup call lsp#register_server({
    \ 'name': 'intelephense',
    \ 'cmd': {server_info->['node', expand('PATH_TO_GLOBAL_NODE_MODULES/intelephense/lib/intelephense.js'), '--stdio']},
    \ 'initialization_options': {"storagePath": "PATH_TO_TEMP_FOLDER/intelephense"},
    \ 'whitelist': ['php'],
    \ })
" bash
if executable('bash-language-server')
  au User lsp_setup call lsp#register_server({
        \ 'name': 'bash-language-server',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'bash-language-server start']},
        \ 'whitelist': ['sh'],
        \ })
endif
" css
if executable('css-languageserver')
    au User lsp_setup call lsp#register_server({
        \ 'name': 'css-languageserver',
        \ 'cmd': {server_info->[&shell, &shellcmdflag, 'css-languageserver --stdio']},
        \ 'whitelist': ['css', 'less', 'sass'],
        \ })
endif
" End vim-lsp

" Fix to let ESC work as escape with AutoClose plugin
let g:AutoClosePumvisible = { "ENTER": "\<C-Y>", "ESC": "\<ESC>" }

" TagBar
nmap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" lexical
augroup lexical
  autocmd!
  autocmd FileType markdown,mkd call lexical#init()
  autocmd FileType textile call lexical#init()
  autocmd FileType text call lexical#init()
augroup END

" End Plugin settings

" different ts
autocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType vue setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType css setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType jsx setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType ejs setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType json setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType Jenkinsfile setlocal shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType yaml setlocal shiftwidth=2 tabstop=2 softtabstop=2

" Ignore python 3.7 import warning for old plugins
if has('python3')
    silent! python3 1
endif
